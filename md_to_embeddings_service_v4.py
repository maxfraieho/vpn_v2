#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Markdown to Embeddings Service - –û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø v4.0
–°–µ—Ä–≤—ñ—Å –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è markdown —Ñ–∞–π–ª—ñ–≤ –≤ embeddings
–í–µ—Ä—Å—ñ—è: 4.0.0 (–ó –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è–º)
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path
import json
from datetime import datetime

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤, —è–∫—ñ –ù–ï –≤–∫–ª—é—á–∞—î–º–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
SERVICE_FILES = {
    'codetomd.py',
    'codetomd.bat', 
    'drakon_converter.py',
    'md_to_embeddings_service.py',
    'md_to_embeddings_service_v4.py',
    'md-to-embeddings-service.bat',
    'run_md_service.bat',
    '.gitignore',
    'package-lock.json',
    'yarn.lock',
    '.DS_Store',
    'Thumbs.db'
}

# –°–µ—Ä–≤—ñ—Å–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è
SERVICE_DIRS = {
    '.git', 
    'node_modules', 
    'venv', 
    '__pycache__', 
    '.vscode',
    '.idea', 
    'dist', 
    'build', 
    'target', 
    '.pytest_cache',
    'env',
    '.env'
}

def show_menu():
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("\n" + "="*60)
    print("    üîß MD TO EMBEDDINGS SERVICE v4.0 üîß")
    print("="*60)
    print("–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É:")
    print("1. üöÄ –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ —à–∞–±–ª–æ–Ω –ø—Ä–æ—î–∫—Ç—É")
    print("2. üîÑ –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ DRAKON —Å—Ö–µ–º–∏ (.json ‚Üí .md)")
    print("3. üìÑ –°—Ç–≤–æ—Ä–∏—Ç–∏ —É–∑–∞–≥–∞–ª—å–Ω—é—é—á–∏–π .md —Ñ–∞–π–ª –∑ –∫–æ–¥—É –ø—Ä–æ—î–∫—Ç—É")
    print("4. üì§ –ö–æ–ø—ñ—é–≤–∞—Ç–∏ .md —Ñ–∞–π–ª –¥–æ Dropbox/—ñ–Ω—à–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
    print("5. üö™ –í–∏—Ö—ñ–¥")
    print("="*60)

def option_1_deploy_template():
    """–í–∞—Ä—ñ–∞–Ω—Ç 1: –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ —à–∞–±–ª–æ–Ω –ø—Ä–æ—î–∫—Ç—É"""
    print("\n" + "üöÄ"*20)
    print("--- –í–ê–†–Ü–ê–ù–¢ 1: –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É ---")
    print("üöÄ"*20)
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        directories = ["code", "drn", "srv"]
        print("üìÅ –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó:")
        for directory in directories:
            Path(directory).mkdir(exist_ok=True)
            print(f"   ‚úì {directory}/")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ —Ñ–∞–π–ª–∏
        print("\nüìÑ –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ —Ñ–∞–π–ª–∏:")
        
        # codetomd.py - –Ω–µ—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è
        print("   üìÑ codetomd.py...")
        create_codetomd_file()
        print("   ‚úì codetomd.py")
        
        # drakon_converter.py
        print("   üìÑ drakon_converter.py...")
        create_drakon_converter_file()
        print("   ‚úì drakon_converter.py")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ README –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–∞–ø–∫–∏
        create_readme_files()
        
        print("\n‚úÖ –®–∞–±–ª–æ–Ω –ø—Ä–æ—î–∫—Ç—É —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ!")
        print("üìã –°—Ç–≤–æ—Ä–µ–Ω–æ:")
        print("   - üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: code/, drn/, srv/")
        print("   - üìÑ –§–∞–π–ª–∏: codetomd.py, drakon_converter.py")
        print("   - üìñ README —Ñ–∞–π–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—ñ —à–∞–±–ª–æ–Ω—É: {e}")
        return False

def option_2_convert_drakon():
    """–í–∞—Ä—ñ–∞–Ω—Ç 2: –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ DRAKON —Å—Ö–µ–º–∏"""
    print("\n" + "üîÑ"*20)
    print("--- –í–ê–†–Ü–ê–ù–¢ 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è DRAKON —Å—Ö–µ–º ---")
    print("üîÑ"*20)
    
    drn_dir = Path("drn")
    if not drn_dir.exists():
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è drn/ –Ω–µ —ñ—Å–Ω—É—î!")
        print("üí° –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç 1 –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É.")
        return False
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ .json —Ñ–∞–π–ª–∏ –≤ –ø–∞–ø—Ü—ñ drn
    json_files = list(drn_dir.glob("*.json"))
    
    if not json_files:
        print("üî≠ –£ –ø–∞–ø—Ü—ñ drn/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ .json —Ñ–∞–π–ª—ñ–≤.")
        print("üí° –ü–æ–º—ñ—Å—Ç—ñ—Ç—å DRAKON —Å—Ö–µ–º–∏ (.json) –≤ –ø–∞–ø–∫—É drn/ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        return False
    
    print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(json_files)} —Ñ–∞–π–ª(—ñ–≤) –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:")
    for json_file in json_files:
        print(f"   üìÑ {json_file.name}")
    
    converted_count = 0
    errors = []
    
    for json_file in json_files:
        try:
            print(f"\nüìÑ –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ: {json_file.name}")
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–∑–≤—É –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ .md —Ñ–∞–π–ª—É
            md_file = json_file.with_suffix('.md')
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ drakon_converter.py
            result = subprocess.run([
                sys.executable, "drakon_converter.py", 
                str(json_file), "-o", str(md_file)
            ], capture_output=True, text=True)
            
            if md_file.exists():
                print(f"   ‚úì {md_file.name}")
                size = md_file.stat().st_size
                print(f"   üìè –†–æ–∑–º—ñ—Ä: {size:,} –±–∞–π—Ç")
                converted_count += 1
            else:
                errors.append(f"{json_file.name}: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª")
                print(f"   ‚ùå {json_file.name}: –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó")
                
        except Exception as e:
            errors.append(f"{json_file.name}: {str(e)}")
            print(f"   ‚ùå {json_file.name}: {str(e)}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:")
    print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {converted_count}")
    print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∏: {len(errors)}")
    
    return converted_count > 0

def option_3_create_md():
    """–í–∞—Ä—ñ–∞–Ω—Ç 3: –°—Ç–≤–æ—Ä–∏—Ç–∏ .md —Ñ–∞–π–ª –∑ –∫–æ–¥—É –ø—Ä–æ—î–∫—Ç—É (–ë–ï–ó —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤)"""
    print("\n" + "üìÑ"*20)
    print("--- –í–ê–†–Ü–ê–ù–¢ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–∑–∞–≥–∞–ª—å–Ω—é—é—á–æ–≥–æ .md —Ñ–∞–π–ª—É ---")
    print("üìÑ"*20)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    current_dir = Path.cwd()
    project_name = current_dir.name
    output_file = f"{project_name}.md"
    
    print(f"üìÅ –ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {current_dir}")
    print(f"üìã –ù–∞–∑–≤–∞ –ø—Ä–æ—î–∫—Ç—É: {project_name}")
    print(f"üìÑ –í–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª: {output_file}")
    print("\n‚ö†Ô∏è –£–í–ê–ì–ê: –°–µ—Ä–≤—ñ—Å–Ω—ñ —Ñ–∞–π–ª–∏ –±—É–¥—É—Ç—å –≤–∏–∫–ª—é—á–µ–Ω—ñ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")
    
    try:
        print("\nüìÑ –°—Ç–≤–æ—Ä—é—î–º–æ .md —Ñ–∞–π–ª...")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è
        valid_extensions = {'.py', '.js', '.ts', '.html', '.css', '.md', '.txt', 
                           '.yml', '.yaml', '.json', '.xml', '.sql', '.sh', '.bat',
                           '.jsx', '.tsx', '.vue', '.svelte', '.php', '.java', '.cs',
                           '.cpp', '.c', '.h', '.hpp', '.rb', '.go', '.rs', '.swift'}
        
        processed_files = 0
        total_size = 0
        skipped_files = 0
        
        with open(output_file, 'w', encoding='utf-8') as out:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            out.write(f"# –ö–æ–¥ –ø—Ä–æ—î–∫—Ç—É: {project_name}\n\n")
            out.write(f"**–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            out.write(f"**–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è:** `{os.path.abspath(current_dir)}`\n\n")
            out.write("---\n\n")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—î–∫—Ç—É (–±–µ–∑ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤)
            out.write("## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—î–∫—Ç—É\n\n")
            out.write("```\n")
            write_tree_structure(out, str(current_dir), SERVICE_DIRS)
            out.write("```\n\n")
            out.write("---\n\n")
            
            # –§–∞–π–ª–∏
            out.write("## –§–∞–π–ª–∏ –ø—Ä–æ—î–∫—Ç—É\n\n")
            
            for root, dirs, files in os.walk(current_dir):
                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                dirs[:] = [d for d in dirs if d not in SERVICE_DIRS and not d.startswith('.')]
                
                for file_name in files:
                    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å–Ω—ñ —Ñ–∞–π–ª–∏
                    if file_name in SERVICE_FILES:
                        skipped_files += 1
                        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Å–µ—Ä–≤—ñ—Å–Ω–∏–π): {file_name}")
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ–∞–π–ª–∏, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ –∫—Ä–∞–ø–∫–∏ (–∫—Ä—ñ–º .env)
                    if file_name.startswith('.') and file_name != '.env':
                        skipped_files += 1
                        continue
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
                    _, extension = os.path.splitext(file_name)
                    if extension.lower() not in valid_extensions:
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∞–º —Ä–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ñ–∞–π–ª
                    if file_name == output_file:
                        continue
                    
                    full_path = os.path.join(root, file_name)
                    relative_path = os.path.relpath(full_path, current_dir)
                    
                    try:
                        file_size = os.path.getsize(full_path)
                        
                        out.write(f"### {relative_path}\n\n")
                        out.write(f"**–†–æ–∑–º—ñ—Ä:** {file_size:,} –±–∞–π—Ç\n\n")
                        
                        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏ –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
                        lang_map = {
                            '.py': 'python', '.js': 'javascript', '.ts': 'typescript',
                            '.html': 'html', '.css': 'css', '.yml': 'yaml', 
                            '.yaml': 'yaml', '.json': 'json', '.xml': 'xml',
                            '.sql': 'sql', '.sh': 'bash', '.bat': 'batch',
                            '.jsx': 'jsx', '.tsx': 'tsx', '.vue': 'vue',
                            '.php': 'php', '.java': 'java', '.cs': 'csharp',
                            '.cpp': 'cpp', '.c': 'c', '.rb': 'ruby',
                            '.go': 'go', '.rs': 'rust', '.swift': 'swift'
                        }
                        lang = lang_map.get(extension.lower(), 'text')
                        
                        out.write(f"```{lang}\n")
                        
                        with open(full_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            out.write(content)
                            if not content.endswith('\n'):
                                out.write('\n')
                            processed_files += 1
                            total_size += file_size
                            print(f"‚úÖ –î–æ–¥–∞–Ω–æ: {relative_path} ({file_size:,} –±–∞–π—Ç)")
                            
                    except UnicodeDecodeError:
                        out.write(f"[–ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ UTF-8]")
                        print(f"‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: {relative_path} - –ø–æ–º–∏–ª–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è")
                    except Exception as e:
                        out.write(f"[–ü–æ–º–∏–ª–∫–∞: {str(e)}]")
                        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {relative_path} - {str(e)}")
                    
                    out.write("\n```\n\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            out.write("---\n\n")
            out.write("## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
            out.write(f"- **–û–±—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤:** {processed_files}\n")
            out.write(f"- **–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:** {skipped_files}\n")
            out.write(f"- **–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä:** {total_size:,} –±–∞–π—Ç ({total_size/1024:.1f} KB)\n")
            out.write(f"- **–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        
        print(f"\n‚úÖ –§–∞–π–ª {output_file} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        print(f"üìÑ –í–º—ñ—Å—Ç –ø—Ä–æ—î–∫—Ç—É –∑—ñ–±—Ä–∞–Ω–æ –≤ –æ–¥–∏–Ω markdown —Ñ–∞–π–ª.")
        print(f"üìä –û–±—Ä–æ–±–ª–µ–Ω–æ: {processed_files} —Ñ–∞–π–ª—ñ–≤")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö: {skipped_files} —Ñ–∞–π–ª—ñ–≤")
        print(f"üìè –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {total_size:,} –±–∞–π—Ç ({total_size/1024:.1f} KB)")
        
        if Path(output_file).exists():
            size = Path(output_file).stat().st_size
            print(f"üìè –†–æ–∑–º—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É: {size:,} –±–∞–π—Ç ({size/1024:.1f} KB)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

def option_4_copy_md():
    """–í–∞—Ä—ñ–∞–Ω—Ç 4: –ö–æ–ø—ñ—é–≤–∞—Ç–∏ .md —Ñ–∞–π–ª –¥–æ Dropbox –∞–±–æ —ñ–Ω—à–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
    print("\n" + "üì§"*20)
    print("--- –í–ê–†–Ü–ê–ù–¢ 4: –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è .md —Ñ–∞–π–ª—É ---")
    print("üì§"*20)
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ .md —Ñ–∞–π–ª–∏ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    md_files = list(Path.cwd().glob("*.md"))
    
    if not md_files:
        print("‚ùå –£ –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ .md —Ñ–∞–π–ª—ñ–≤")
        print("üí° –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å .md —Ñ–∞–π–ª (–≤–∞—Ä—ñ–∞–Ω—Ç 3)")
        return False
    
    print("üìã –ó–Ω–∞–π–¥–µ–Ω—ñ .md —Ñ–∞–π–ª–∏:")
    for i, md_file in enumerate(md_files, 1):
        size = md_file.stat().st_size
        print(f"   {i}. {md_file.name} ({size:,} –±–∞–π—Ç)")
    
    # –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    if len(md_files) == 1:
        selected_file = md_files[0]
        print(f"\nüìÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–±—Ä–∞–Ω–æ: {selected_file.name}")
    else:
        try:
            choice = input(f"\nüî¢ –í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è (1-{len(md_files)}): ").strip()
            idx = int(choice) - 1
            if 0 <= idx < len(md_files):
                selected_file = md_files[idx]
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
                return False
        except ValueError:
            print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ")
            return False
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    default_dir = Path(r"C:\Users\tukro\Dropbox\–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è\remotely-save\olena")
    
    print(f"\nüìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º:")
    print(f"   {default_dir}")
    
    custom_path = input("\nüìÇ –í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è (Enter –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º): ").strip()
    
    if custom_path:
        target_dir = Path(custom_path)
    else:
        target_dir = default_dir
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    if not target_dir.exists():
        print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ —ñ—Å–Ω—É—î: {target_dir}")
        create = input("‚ùì –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é? (y/n): ").strip().lower()
        if create == 'y':
            try:
                target_dir.mkdir(parents=True, exist_ok=True)
                print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: {target_dir}")
            except Exception as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {e}")
                return False
        else:
            print("‚ùå –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return False
    
    # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    target_file = target_dir / selected_file.name
    
    try:
        # –Ø–∫—â–æ —Ñ–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î
        if target_file.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î: {target_file}")
            overwrite = input("‚ùì –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏? (y/n): ").strip().lower()
            if overwrite != 'y':
                # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                target_file = target_dir / f"{selected_file.stem}_{timestamp}{selected_file.suffix}"
                print(f"üìù –ù–æ–≤–∏–π —Ñ–∞–π–ª: {target_file.name}")
        
        shutil.copy2(selected_file, target_file)
        
        print(f"\n‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!")
        print(f"üì§ –î–∂–µ—Ä–µ–ª–æ: {selected_file}")
        print(f"üì• –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {target_file}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É
        if target_file.exists():
            size = target_file.stat().st_size
            print(f"üìè –†–æ–∑–º—ñ—Ä: {size:,} –±–∞–π—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: {e}")
        return False

def write_tree_structure(out, root_dir, ignore_dirs, prefix="", max_depth=3, current_depth=0):
    """–ó–∞–ø–∏—Å—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª—ñ–≤ (–±–µ–∑ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤)"""
    if current_depth >= max_depth:
        return
    
    try:
        items = sorted(os.listdir(root_dir))
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Ç–∞ —Ñ–∞–π–ª–∏
        dirs = []
        files = []
        
        for item in items:
            item_path = os.path.join(root_dir, item)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            if item.startswith('.'):
                continue
                
            if os.path.isdir(item_path):
                if item not in ignore_dirs:
                    dirs.append(item)
            else:
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å–Ω—ñ —Ñ–∞–π–ª–∏
                if item not in SERVICE_FILES:
                    files.append(item)
        
        # –í–∏–≤–æ–¥–∏–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        for i, directory in enumerate(dirs):
            is_last_dir = (i == len(dirs) - 1) and not files
            out.write(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last_dir else '‚îú‚îÄ‚îÄ '}{directory}/\n")
            
            extension = "    " if is_last_dir else "‚îÇ   "
            write_tree_structure(out, os.path.join(root_dir, directory), 
                                ignore_dirs, prefix + extension, max_depth, current_depth + 1)
        
        # –í–∏–≤–æ–¥–∏–º–æ —Ñ–∞–π–ª–∏ (–º–∞–∫—Å–∏–º—É–º 10)
        display_files = files[:10]
        for i, file in enumerate(display_files):
            is_last = i == len(display_files) - 1
            out.write(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}{file}\n")
        
        if len(files) > 10:
            out.write(f"{prefix}‚îî‚îÄ‚îÄ ... —Ç–∞ —â–µ {len(files) - 10} —Ñ–∞–π–ª—ñ–≤\n")
            
    except PermissionError:
        out.write(f"{prefix}‚îî‚îÄ‚îÄ [–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É]\n")

def create_codetomd_file():
    """–°—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª codetomd.py"""
    content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Code to Markdown Converter - Helper Script
"""

import os
import sys
from pathlib import Path
from datetime import datetime

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è
SERVICE_FILES = {
    'codetomd.py', 'codetomd.bat', 'drakon_converter.py',
    'md_to_embeddings_service.py', 'md_to_embeddings_service_v4.py',
    'md-to-embeddings-service.bat'
}

def main():
    root_dir = sys.argv[1] if len(sys.argv) > 1 else "."
    project_name = Path(root_dir).resolve().name
    output_file = sys.argv[2] if len(sys.argv) > 2 else f"{project_name}.md"
    
    extensions = {'.py', '.js', '.ts', '.html', '.css', '.md', '.txt', '.json', '.yml', '.yaml'}
    ignore_dirs = {'.git', 'node_modules', 'venv', '__pycache__', '.vscode', '.idea'}
    
    with open(output_file, 'w', encoding='utf-8') as out:
        out.write(f"# {project_name}\\n\\n")
        out.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\\n")
        
        count = 0
        for root, dirs, files in os.walk(root_dir):
            dirs[:] = [d for d in dirs if d not in ignore_dirs]
            for file in files:
                if file in SERVICE_FILES:
                    continue
                if Path(file).suffix in extensions:
                    filepath = os.path.join(root, file)
                    relpath = os.path.relpath(filepath, root_dir)
                    out.write(f"## {relpath}\\n\\n```\\n")
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            out.write(f.read())
                            out.write("\\n```\\n\\n")
                            count += 1
                            print(f"Added: {relpath}")
                    except:
                        out.write("[Could not read file]\\n```\\n\\n")
        
        print(f"Processed {count} files")

if __name__ == "__main__":
    main()
'''
    
    with open("codetomd.py", "w", encoding="utf-8") as f:
        f.write(content)

def create_drakon_converter_file():
    """–°—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª drakon_converter.py"""
    content = '''#!/usr/bin/env python3
"""
DRAKON to Markdown Converter
"""

import json
import sys
from datetime import datetime

def convert_drakon_to_markdown(input_file, output_file=None):
    if not output_file:
        output_file = input_file.replace('.json', '.md')
    
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(f"# DRAKON –°—Ö–µ–º–∞\\n\\n")
            f.write(f"**–î–∂–µ—Ä–µ–ª–æ:** `{input_file}`\\n")
            f.write(f"**–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\\n")
            
            nodes = data.get('nodes', {})
            f.write("## –í—É–∑–ª–∏\\n\\n")
            for node_id, node_data in nodes.items():
                node_type = node_data.get('type', 'unknown')
                content = node_data.get('content', {})
                text = content.get('txt', '') if isinstance(content, dict) else str(content)
                f.write(f"- **{node_id}** ({node_type}): {text}\\n")
        
        print(f"–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ: {output_file}")
        return True
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return False

def main():
    if len(sys.argv) < 2:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python drakon_converter.py input.json [-o output.md]")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[3] if len(sys.argv) > 3 and sys.argv[2] == "-o" else None
    convert_drakon_to_markdown(input_file, output_file)

if __name__ == "__main__":
    main()
'''
    
    with open("drakon_converter.py", "w", encoding="utf-8") as f:
        f.write(content)

def create_readme_files():
    """–°—Ç–≤–æ—Ä—é—î README —Ñ–∞–π–ª–∏ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π"""
    
    readme_content = {
        "code": """# üìÅ Code Directory

–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –∫–æ–¥—É –ø—Ä–æ—î–∫—Ç—ñ–≤.

## –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
- –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–¥—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
- –ê—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ–π –∫–æ–¥—É
- –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤ markdown

## –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
–ü–æ–º—ñ—Å—Ç—ñ—Ç—å —Å—é–¥–∏ –≤–∞—à—ñ –ø—Ä–æ—î–∫—Ç–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ markdown —Ñ–∞–π–ª–∏.
""",
        "drn": """# üìÅ DRN Directory (DRAKON Files)

–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è DRAKON —Å—Ö–µ–º —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.

## –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è DRAKON —Å—Ö–µ–º (.json —Ñ–∞–π–ª–∏)
- –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤ markdown

## –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
1. –ü–æ–º—ñ—Å—Ç—ñ—Ç—å .json —Ñ–∞–π–ª–∏ –∑—ñ —Å—Ö–µ–º–∞–º–∏ –≤ —Ü—é –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç 2 –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
""",
        "srv": """# üìÅ SRV Directory (Services)

–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π.

## –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏
- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∏
- –õ–æ–≥–∏ —Ç–∞ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
"""
    }
    
    for dirname, content in readme_content.items():
        readme_path = Path(dirname) / "README.md"
        try:
            with open(readme_path, "w", encoding="utf-8") as f:
                f.write(content)
            print(f"   ‚úì {readme_path}")
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è {readme_path}: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ MD to Embeddings Service v4.0")
    print("üìÖ –î–∞—Ç–∞:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print("üìÅ –†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è:", Path.cwd())
    
    while True:
        try:
            show_menu()
            choice = input("\nüëâ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É (1-5): ").strip()
            
            if choice == "1":
                success = option_1_deploy_template()
                if success:
                    input("\n‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                else:
                    input("\n‚ùå –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            
            elif choice == "2":
                success = option_2_convert_drakon()
                if success:
                    input("\n‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                else:
                    input("\n‚ùå –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            
            elif choice == "3":
                success = option_3_create_md()
                if success:
                    input("\n‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                else:
                    input("\n‚ùå –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            
            elif choice == "4":
                success = option_4_copy_md()
                if success:
                    input("\n‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                else:
                    input("\n‚ùå –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            
            elif choice == "5":
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                print("üìä –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è MD to Embeddings Service!")
                break
            
            else:
                print("\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä! –í–∏–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 5.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
        
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

if __name__ == "__main__":
    main()